{"version":3,"sources":["countdownTimer.jsx","resetTimer.jsx","helper/formatTime.js","App.js","serviceWorker.js","index.js"],"names":["countdown","ResetTimer","_ref","handleClick","react_default","a","createElement","className","onClick","CountdownTimer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetTimer","clearInterval","setState","displayTimeLeft","state","displayEndTime","timestamp","time","Date","getHour","getHours","getMinutes","concat","seconds","minutesLeft","Math","floor","hoursLeft","remainSecondsLeft","hours","minutes","formatTime","_this2","then","now","setInterval","secondsLeft","round","prevProps","renderTimer","_this$state","_this$props","timerWrapperClass","timerClass","isDisplayEndTime","Fragment","Component","App","data","label","currentCountdownTime","input","React","createRef","setCurentCountdownTime","parseInt","handleSubmit","e","preventDefault","current","value","map","d","index","key","onSubmit","type","ref","placeholder","countdownTimer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd9e45d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ResetTimer from \"./resetTimer\";\nimport formatTime from \"./helper/formatTime\";\n\nlet countdown;\n\nclass CountdownTimer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayTimeLeft: \"\",\n      displayEndTime: \"\"\n    };\n  }\n\n  displayEndTime(timestamp) {\n    const time = new Date(timestamp);\n    const getHour = time.getHours();\n    const getMinutes = time.getMinutes();\n    this.setState({\n      displayEndTime: `${getHour}: ${getMinutes < 10 ? \"0\" : \"\"}${getMinutes}`\n    });\n  }\n\n  displayTimeLeft(seconds) {\n    const minutesLeft = Math.floor(seconds / 60);\n    const hoursLeft = Math.floor(minutesLeft / 60);\n    const remainSecondsLeft = seconds % 60;\n    this.setState({\n      displayTimeLeft: formatTime(hoursLeft, minutesLeft, remainSecondsLeft)\n    });\n  }\n\n  renderTimer(seconds) {\n    clearInterval(countdown);\n    const now = Date.now();\n    const then = now + seconds * 1000;\n    this.displayTimeLeft(seconds);\n    this.displayEndTime(then);\n\n    countdown = setInterval(() => {\n      const secondsLeft = Math.round((then - Date.now()) / 1000);\n      if (secondsLeft < 0) {\n        clearInterval(countdown);\n        return;\n      }\n      this.displayTimeLeft(secondsLeft);\n    }, 1000);\n  }\n\n  resetTimer = () => {\n    clearInterval(countdown);\n    this.setState({\n      displayTimeLeft: \"\"\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.seconds !== this.props.seconds) {\n      this.renderTimer(this.props.seconds);\n    }\n  }\n\n  render() {\n    const { displayTimeLeft, displayEndTime } = this.state;\n    const { timerWrapperClass, timerClass, isDisplayEndTime } = this.props;\n    return (\n      <React.Fragment>\n        <div className={timerWrapperClass}>\n          <div className={timerClass}>{displayTimeLeft || \"00:00:00\"}</div>\n        </div>\n        <ResetTimer handleClick={this.resetTimer} />\n        {displayTimeLeft &&\n          isDisplayEndTime && (\n            <div>\n              Be back at\n              {displayEndTime}\n            </div>\n          )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CountdownTimer;\n","import React from \"react\";\n\nconst ResetTimer = ({ handleClick }) => {\n  return (\n    <button className=\"button\" onClick={handleClick}>\n      Reset\n    </button>\n  );\n};\n\nexport default ResetTimer;\n","export default (hoursLeft, minutesLeft, remainSecondsLeft) => {\n  const hours = `${hoursLeft < 10 ? \"0\" : \"\"}${hoursLeft}`;\n  const minutes = `${minutesLeft < 10 ? \"0\" : \"\"}${minutesLeft}`;\n  const seconds = `${remainSecondsLeft < 10 ? \"0\" : \"\"}${remainSecondsLeft}`;\n  return `${hours}: ${minutes}: ${seconds}`;\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CountdownTimer from \"./countdownTimer\";\n\nclass App extends Component {\n  data = [\n    { label: \"20 SEC\", seconds: 20 },\n    { label: \"5 MIN\", seconds: 300 },\n    { label: \"20 Min\", seconds: 1200 }\n  ];\n\n  state = {\n    currentCountdownTime: null\n  };\n\n  input = React.createRef();\n\n  setCurentCountdownTime = seconds => {\n    this.setState({ currentCountdownTime: parseInt(seconds) });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setCurentCountdownTime(this.input.current.value);\n    this.input.current.value = \"\";\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"buttonGroup\">\n          {this.data.map((d, index) => (\n            <button\n              className=\"button\"\n              key={index}\n              onClick={() => this.setCurentCountdownTime(d.seconds)}\n            >\n              {d.label}\n            </button>\n          ))}\n          <form onSubmit={this.handleSubmit}>\n            <input\n              className=\"input\"\n              type=\"text\"\n              ref={this.input}\n              placeholder=\"set custom seconds\"\n            />\n          </form>\n        </div>\n        <div>\n          <CountdownTimer\n            timerWrapperClass=\"timerWrapper\"\n            timerClass=\"timer\"\n            seconds={this.state.currentCountdownTime}\n            isDisplayEndTime={true}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}